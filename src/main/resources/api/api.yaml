swagger: "2.0"
info:
  description: ""
  version: "0.0.1"
  title: "Easy Tests"
host: "api.easy-tests"
tags:
  - name: "users"
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  #
  # Users
  #
  /v1/users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      responses:
        "200":
          description: An array of users
          schema:
            $ref: '#/definitions/V1Users'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new User
      operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be created
          schema:
            $ref: '#/definitions/V1User'
      tags:
        - users
      responses:
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be added instead of the existing              one with the same id
          schema:
            $ref: '#/definitions/V1User'
      responses:
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/users/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          type: integer
      responses:
        "200":
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/V1User'
        '400':
          description: The specified user ID is invalid (not a number).
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found.
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/users/me:
    get:
      summary: Info for current user
      operationId: showCurrentUser
      tags:
        - users
      responses:
        "200":
          description: Current user
          schema:
            $ref: '#/definitions/V1User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete a user with the specific id
      operationId: deleteUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to delete
          type: integer
      responses:
        '400':
          description: The specified user ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  /v1/Questions:
    parameters:
      - name: topicId
        in: path
        required: true
        description: Id of the specific topic
        type: string
    get:
      summary: Get the list of all questions in the specific topic
      operationId: listQuestions
      tags:
        - questions
      responses:
        '200':
          description: Return an array of the specific topic's questions
          schema:
            type: array
            items:
              $ref: '#/definitions/V1Question'
        '400':
          description: Invalid topic ID supplied
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: Questions not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Add a new question
      operationId: createQuestion
      tags:
        - questions
      parameters:
        - name: body
          in: body
          required: true
          description: Question that need to be added
          schema:
            $ref: '#/definitions/V1Question'
      responses:
        '200':
          description: Return a new question
          schema:
            $ref: '#/definitions/V1Question'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/questions/{questionId}:
    parameters:
      - name: questionId
        in: path
        required: true
        description: Id of the question to retrieve
        type: integer
        format: int64
    get:
      summary: Get the question with a specific id
      operationId: showQuestionById
      tags:
        - questions
      responses:
        '200':
          description: Return the question
          schema:
            $ref: '#/definitions/V1Question'
        '400':
          description: Invalid question ID supplied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: Question not found.
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing question
      operationId: updateQuestion
      tags:
        - questions
      parameters:
        - name: body
          in: body
          required: true
          description: Question that needs to be added instead of the existing              one with the same id
          schema:
            $ref: '#/definitions/V1Question'
      responses:
        '200':
          description: Return the updated question
          schema:
            $ref: '#/definitions/V1Question'
        '403':
          description: Access forbidden
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: Question not found
          schema:
            $ref: '#/definitions/V1Error'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete question with specific id
      operationId: deleteQuestionById
      tags:
        - question
      parameters:
        - name: body
          in: path
          required: true
          description: The id of the question to delete
          type: integer
      responses:
        "400":
          description: The specified question ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        "404":
          description: A question with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        "403":
          description: Access forbidden
          schema:
            $ref: '#/definitions/V1Error' 
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/AnswerForAdmin:
    parameters:
      - name: answerId
        in: path
        required: true
        description: Id of specific question
        type: string
  #
  # Issues
  #
  #
  # Quizzes
  #
  #
  # Points
  #
  #
  # Temporary Objects
  #
  /v1/objects:
    get:
      summary: List all object
      operationId: listObject
      tags:
        - objects
      responses:
        "200":
          description: An array of objects
          schema:
            $ref: '#/definitions/V1Objects'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/objects/{objectId}:
    get:
      summary: Info for a specific user
      operationId: showObjectById
      tags:
        - objects
      parameters:
        - name: objectId
          in: path
          required: true
          description: The id of the object to retrieve
          type: integer
      responses:
        "200":
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/V1Object'
        "404":
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Object'
definitions:
  #
  # Users
  #
  V1User:
    type: object
    required:
      - firstName
      - lastName
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
        format: int64
    example:
      id: 1
      firstName: 'Ivan'
      lastName: 'Ivanovich'
      surname: 'Ivanov'
      email: 'Ivanov@gmail.com'
      password: '1244s'
      isAdmin: false
      state: 1
  V1Users:
    type: array
    items:
      $ref: '#/definitions/V1User'
  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  V1Question:
    type: object
    required:
      - questionText
      - questionType
      - topic
    properties:
      id:
        type: integer
        format: int64
      questionText:
        type: string
      questionType:
        type: string
        description: question type means the type of answer - multi, free, etc
        default: many answers
        enum:
        - many answers
        - one answer
        - text answer
        - numeric answer
      topicNum:
        $ref: '#/definitions/V1TopicID'
      answers:
        type: array
        items:
          $ref: '#/definitions/V1AnswerForAdmin'
    example:
      id: 100500
      questionText: 'Select private networks:'
      questionType: 'many answers'
      topicNum: 1
  V1Questions:
    type: array
    items:
      $ref: '#/definitions/V1Question'
  # 
  # Answers
  # 
  V1AnswerForAdmin:
    type: object
    required:
      - answerText
      - answerType
      - question
    properties:
      id:
        type: integer
        format: int64
      answerText:
        type: string
      answerType:
        type: string
        description: Type of answer text or numeric
        default: text answer
        enum:
          - text answer
          - numeric answer
      question:
        $ref: '#/definitions/V1Question'
    example:
      id: 100500
      answerText: 2,3
      answerType: numeric answer
  V1AnswersForAdmin:
    type: array
    items:
      $ref: '#/definitions/V1AnswerForAdmin'
  #
  # Issues
  #
  #
  # Quizzes
  #
  #
  # Points
  #
  #
  # Temporary Objects
  #
  V1Object:
    required:
      - id
      - firstName
      - lastNname
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
  V1Objects:
    type: array
    items:
      $ref: '#/definitions/V1Object'
  #
  # Errors
  #
  V1Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string