swagger: '2.0'
info:
  description: ''
  version: '0.0.1'
  title: 'Easy Tests'
host: 'api.easy-tests'
tags:
  - name: 'users'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  #
  # Users
  #
  /v1/users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: An array of users
          schema:
            $ref: '#/definitions/V1Users'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new User
      operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be created
          schema:
            $ref: '#/definitions/V1User'
      tags:
        - users
      responses:
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be added instead of the existing              one with the same id
          schema:
            $ref: '#/definitions/V1User'
      responses:
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/users/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          type: integer
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/V1User'
        '400':
          description: The specified user ID is invalid (not a number).
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found.
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/users/me:
    get:
      summary: Info for current user
      operationId: showCurrentUser
      tags:
        - users
      responses:
        '200':
          description: Current user
          schema:
            $ref: '#/definitions/V1User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete a user with the specific id
      operationId: deleteUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to delete
          type: integer
      responses:
        '400':
          description: The specified user ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  #
  # Issues
  #
  /v1/issues:
    get:
      summary: List of all issues
      operationId: listIssues
      tags:
        - issues
      parameters:
        - name: subjectId
          in: query
          required: true
          description: Id of specific subject
          type: integer
          format: int64
      responses:
        '200':
          description: Return an array of founded issues
          schema:
            $ref: '#/definitions/V1Issues'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified subject Id or Issues was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new issue
      operationId: createIssue
      parameters:
        - name: issue
          in: body
          required: true
          description: Issue that needs to be created
          schema:
            $ref: '#/definitions/V1Issue'
      tags:
        - issues
      responses:
        '201':
          description: Issue created successfully
          schema:
            $ref: '#/definitions/V1Identity'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing Issue
      operationId: updateIssue
      tags:
        - issues
      parameters:
        - name: issue
          in: body
          required: true
          description: Issue that needs to be updated
          schema:
            $ref: '#/definitions/V1Issue'
      responses:
        '200':
          description: Issue updated successfully
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified issue Id was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/issues/{issueId}:
    parameters:
      - name: issueId
        in: path
        required: true
        description: The ID of the issue to retrieve
        type: integer
        format: int64
    get:
      summary: Info for a specific issue
      operationId: showIssueById
      tags:
        - issues
      responses:
        '200':
          description: Issue with specified ID
          schema:
            $ref: '#/definitions/V1Issue'
        '400':
          description: The specified issue ID is invalid
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified issue Id was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete an issue with the specific id
      operationId: deleteIssueById
      tags:
        - Issues
      responses:
        '200':
          description: Issue deleted successfully
        '400':
          description: The specified issue ID is invalid
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified issue Id was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  #
  # Quizzes
  #
  #
  # Points
  #
  #
  # Temporary Objects
  #
  /v1/objects:
    get:
      summary: List all object
      operationId: listObject
      tags:
        - objects
      responses:
        '200':
          description: An array of objects
          schema:
            $ref: '#/definitions/V1Objects'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  /v1/objects/{objectId}:
    get:
      summary: Info for a specific user
      operationId: showObjectById
      tags:
        - objects
      parameters:
        - name: objectId
          in: path
          required: true
          description: The id of the object to retrieve
          type: integer
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/V1Object'
        '404':
          description: unexpected error
          schema:
            $ref: '#/definitions/V1Object'
definitions:
  #
  # Users
  #
  V1User:
    type: object
    required:
      - firstName
      - lastName
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
        format: int64
    example:
      id: 1
      firstName: 'Ivan'
      lastName: 'Ivanovich'
      surname: 'Ivanov'
      email: 'Ivanov@gmail.com'
      password: '1244s'
      isAdmin: false
      state: 1
  V1Users:
    type: array
    items:
      $ref: '#/definitions/V1User'
  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  #
  # Issues
  #
  V1Issue:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      subject:
        type: object
        items:
          $ref: '#/definitions/V1Identity'
    required:
      - name
      - subject
    example:
      id: 1
      name: Test№1
  V1Issues:
    type: array
    items:
      $ref: '#/definitions/V1Issue'
  #
  # TODO: IssueStandard that we should pass for creation(generation) issue.
  #
  # Quizzes
  #
  #
  # Points
  #
  #
  # Temporary Objects
  #
  V1Object:
    required:
      - firstName
      - lastNname
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
      subjects:
        $ref: '#/definitions/V1Identities'
  V1Objects:
    type: array
    items:
      $ref: '#/definitions/V1Object'
  V1Identity:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
  V1Identities:
    type: array
    items:
      $ref: '#/definitions/V1Identity'
  #
  # Errors
  #
  V1Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
