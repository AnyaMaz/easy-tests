swagger: '2.0'
info:
  description: ''
  version: '0.0.1'
  title: 'Easy Tests'
host: 'api.easy-tests'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  #
  # Users
  #
  /v1/users:
    get:
      summary: Retrieve Users list
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          description: An array of founded users
          schema:
            $ref: '#/definitions/V1Users'
        '400':
          description: Invalid query parameter value
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new User
      operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be created
          schema:
            $ref: '#/definitions/V1User'
      tags:
        - Users
      responses:
        '201':
          description: User created successfully
          schema:
            $ref: '#/definitions/V1Identity'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing User
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: user
          in: body
          required: true
          description: User that needs to be updated
          schema:
            $ref: '#/definitions/V1User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  /v1/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        type: integer
    get:
      summary: Retrieve User with a specified ID
      operationId: showUserById
      tags:
        - Users
      responses:
        '200':
          description: User with specified ID
          schema:
            $ref: '#/definitions/V1User'
        '400':
          description: The specified user ID is invalid (not a number).
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found.
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete User with the specified ID
      operationId: deleteUserById
      tags:
        - Users
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: The specified user ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A user with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  /v1/users/me:
    get:
      summary: Retrieve current User
      operationId: showCurrentUser
      tags:
        - Users
      responses:
        '200':
          description: Current user
          schema:
            $ref: '#/definitions/V1User'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  /v1/questions:
    get:
      summary: Retrieve Questions list
      operationId: listQuestions
      tags:
        - Questions
      parameters:
        - name: topicId
          in: query
          required: true
          description: Id of the specific topic
          type: integer
          format: int64
      responses:
        '200':
          description: An array of founded Questions
          schema:
            $ref: '#/definitions/V1Questions'
        '400':
          description: The specified question ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: Topic with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new Question
      operationId: createQuestion
      tags:
        - Questions
      parameters:
        - name: body
          in: body
          required: true
          description: Question that needs to be created
          schema:
            $ref: '#/definitions/V1Question'
      responses:
        '201':
          description: Qustion created successfully
          schema:
            $ref: '#/definitions/V1Identity'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing Question
      operationId: updateQuestion
      tags:
        - Questions
      parameters:
        - name: body
          in: body
          required: true
          description: Question that needs to be updated
          schema:
            $ref: '#/definitions/V1Question'
      responses:
        '200': 
          description: Question updated successfully
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  /v1/questions/{questionId}:
    parameters:
      - name: questionId
        in: path
        required: true
        description: Question ID
        type: integer
        format: int64
    get:
      summary: Retrieve Question with a specified ID
      operationId: showQuestionById
      tags:
        - Questions
      responses:
        '200':
          description: Question with specified ID
          schema:
            $ref: '#/definitions/V1Question'
        '400':
          description: The specified Question ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A Question with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'    
    delete:
      summary: Delete Question with specified ID
      operationId: deleteQuestionById
      tags:
        - Questions
      responses:
        '200':
          description: Question deleted successfully
        '400':
          description: The specified Question ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A question with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  #
  # Issues
  #
  /v1/issues:
    get:
      summary: Retrieve Issues list
      operationId: listIssues
      tags:
        - Issues
      parameters:
        - name: subjectId
          in: query
          required: true
          description: Subject ID
          type: integer
          format: int64
      responses:
        '200':
          description: An array of founded Issues
          schema:
            $ref: '#/definitions/V1Issues'
        '400':
          description: The specified Subject ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: A Subject with the specified ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new Issue
      operationId: createIssue
      parameters:
        - name: issue
          in: body
          required: true
          description: Issue that needs to be created
          schema:
            $ref: '#/definitions/V1Issue'
      tags:
        - Issues
      responses:
        '201':
          description: Issue created successfully
          schema:
            $ref: '#/definitions/V1Identity'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing Issue
      operationId: updateIssue
      tags:
        - Issues
      parameters:
        - name: issue
          in: body
          required: true
          description: Issue that needs to be updated
          schema:
            $ref: '#/definitions/V1Issue'
      responses:
        '200':
          description: Issue updated successfully
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  /v1/issues/{issueId}:
    parameters:
      - name: issueId
        in: path
        required: true
        description: Issue ID
        type: integer
        format: int64
    get:
      summary: Retrieve Issue with a specified ID
      operationId: showIssueById
      tags:
        - Issues
      responses:
        '200':
          description: Issue with specified ID
          schema:
            $ref: '#/definitions/V1Issue'
        '400':
          description: The specified Issue ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified Issue ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    delete:
      summary: Delete Issue with specified ID
      operationId: deleteIssueById
      tags:
        - Issues
      responses:
        '200':
          description: Issue deleted successfully
        '400':
          description: The specified Issue ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified Issue ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
  #
  # Quizzes
  #
  /v1/quizzes:
      parameters:
        - name: issueId
          in: query
          required: true
          description: Id of the specific Issue
          type: integer
          format: int64
      get:
        summary: Retrieve list of all Quizzes by Issue with specified ID
        operationId: listQuizzes
        tags:
          - Quizzes
        responses:
          '200':
            description: An array of founded Quizzes
            schema:
              $ref: '#/definitions/V1Quizzes'
          '400':
            description: The specified Issue ID is invalid (not a number)
            schema:
                $ref: '#/definitions/V1Error'
          '403':
            description: Permission denied
            schema:
              $ref: '#/definitions/V1Error'
          '404':
            description: The specified Quiz was not found in this Issue
            schema:
              $ref: '#/definitions/V1Error'
          default:
              description: Unexpected error
              schema:
                $ref: '#/definitions/V1Error'
  /v1/quizzes/{quizId}:
    parameters:
      - name: quizId
        in: path
        required: true
        description: Id of the specified Quiz
        type: integer
        format: int64
    get:
      summary: Retrieve Quiz with specified ID
      operationId: quizById
      tags:
         - Quizzes
      responses:
         '200':
           description: Quiz with specified ID
           schema:
             $ref: '#/definitions/V1Quiz'
         '400':
           description: The specified Quiz ID is invalid (not a number)
           schema:
             $ref: '#/definitions/V1Error'
         '403':
           description: Permission denied
           schema:
             $ref: '#/definitions/V1Error'
         '404':
           description: The specified Quiz ID was not found
           schema:
             $ref: '#/definitions/V1Error'
         default:
           description: Unexpected error
           schema:
             $ref: '#/definitions/V1Error'
  #
  # Points
  #
  #
  # Temporary Objects
  #
  /v1/objects:
    get:
      summary: Retrieve Objects list
      operationId: listObject
      tags:
        - Objects
      responses:
        '200':
          description: An array of objects
          schema:
            $ref: '#/definitions/V1Objects'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    post:
      summary: Create a new Object
      operationId: createObject
      parameters:
        - name: object
          in: body
          required: true
          description: Object that needs to be created
          schema:
            $ref: '#/definitions/V1Object'
      tags:
        - Objects
      responses:
        '201':
          description: Object created successfully
          schema:
            $ref: '#/definitions/V1Identity'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
    put:
      summary: Update an existing object
      operationId: updateObject
      tags:
        - Objects
      parameters:
        - name: object
          in: body
          required: true
          description: Object that needs to be updated
          schema:
            $ref: '#/definitions/V1Object'
      responses:
        '200':
          description: Object updated successfully
        '400':
          description: The specified Object ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'

  /v1/objects/{objectId}:
    get:
      summary: Retrieve Object with a specified ID
      operationId: showObjectById
      tags:
        - Objects
      parameters:
        - name: objectId
          in: path
          required: true
          description: Object ID
          type: integer
      responses:
        '200':
          description: Object with specified ID
          schema:
            $ref: '#/definitions/V1Object'
        '400':
          description: The specified Object ID is invalid (not a number)
          schema:
            $ref: '#/definitions/V1Error'
        '403':
          description: Permission denied
          schema:
            $ref: '#/definitions/V1Error'
        '404':
          description: The specified Object ID was not found
          schema:
            $ref: '#/definitions/V1Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/V1Error'
definitions:
  #
  # Users
  #
  V1User:
    type: object
    required:
      - firstName
      - lastName
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
        format: int64
    example:
      id: 1
      firstName: 'Ivan'
      lastName: 'Ivanovich'
      surname: 'Ivanov'
      email: 'Ivanov@gmail.com'
      isAdmin: false
      state: 1
  V1Users:
    type: array
    items:
      $ref: '#/definitions/V1User'
  #
  # Subjects
  #
  #
  # Topics
  #
  #
  # Questions
  #
  V1Question:
    type: object
    required:
      - text
      - type
      - topic
      - answers
    properties:
      id:
        type: integer
        format: int64
      text:
        type: string
      type:
        type: integer
        description: question type means the type and quantity of answers
        enum:
        - 1
        - 2
        - 3
        - 4
      topic:
        $ref: '#/definitions/V1Identity'
      answers:
        $ref: '#/definitions/V1AdminAnswers'
    example:
      id: 1
      text: 'Select private networks:'
      type: 1
      topic:
        id: 2
      answers:
        - id: 2
          text: '255.255.255.255'
          isRight: false
          number: 1
  V1Questions:
    type: array
    items:
      $ref: '#/definitions/V1Question'
  #
  # Answers
  #
  V1AdminAnswer:
    type: object
    required:
      - text
      - isRight
      - number
    properties:
      id:
        type: integer
        format: int64
      text:
        type: string
      isRight:
        type: boolean
      number:
        type: integer
        format: int64
    example:
      id: 2
      text: '255.255.255.255'
      isRight: false
      number: 1
  V1AdminAnswers:
    type: array
    items:
      $ref: '#/definitions/V1AdminAnswer'
  #
  # Issues
  #
  V1Issue:
    type: object
    required:
      - name
      - subject
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      subject:
        type: object
        items:
          $ref: '#/definitions/V1Identity'
    example:
      id: 1
      name: 'Test №1'
      subject:
        id: 2
  V1Issues:
    type: array
    items:
      $ref: '#/definitions/V1Issue'
  #
  # TODO: IssueStandard that we should pass for creation(generation) issue.
  #
  # Quizzes
  #
  V1Quiz:
      required:
        - id
        - codeExpired
      properties:
        id:
          type: integer
          format: int64
        inviteCode:
          type: string
        codeExpired:
          type: boolean
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        testee:
          $ref: '#/definitions/V1Testee'
      example:
        id: 1
        inviteCode: 1
        codeExpired: false
        startedAt: '2018-03-11T23:20:50'
        finishedAt: '2018-03-11T23:30:50'
        testee:
          $ref: '#/definitions/V1Testee'
  V1Quizzes:
    type: array
    items:
      $ref: '#/definitions/V1Quiz'
  V1Testee:
    required:
      - id
      - firstName
      - lastName
      - surname
      - groupNumber
      - quiz
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      groupNumber:
        type: integer
        format: int64
      quiz:
        $ref: '#/definitions/V1Identity'
    example:
      id: 1
      firstName: 'Ivan'
      lastName: 'Ivanovich'
      surname: 'Ivanov'
      groupNumber: 1
      quiz:
        $ref: '#/definitions/V1Identity'
  V1Testees:
    type: array
    items:
      $ref: '#/definitions/V1Testee'
  #
  # Points
  #
  #
  # Temporary Objects
  #
  V1Object:
    type: object
    required:
      - firstName
      - lastName
      - surname
      - email
      - isAdmin
      - state
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      surname:
        type: string
      email:
        type: string
      isAdmin:
        type: boolean
      state:
        type: integer
      subjects:
        $ref: '#/definitions/V1Identities'
    example:
      id: 1
      firstName: 'FirstName'
      lastName: 'lastName'
      surname: 'surname'
      email: 'mail@mail.ru'
      subjects:
        - 1
        - 4
  V1Objects:
    type: array
    items:
      $ref: '#/definitions/V1Object'
  V1Identity:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
  V1Identities:
    type: array
    items:
      $ref: '#/definitions/V1Identity'
  #
  # Errors
  #
  V1Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
